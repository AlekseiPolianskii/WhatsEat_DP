# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'sample.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import os
import json
import requests

from PyQt5 import QtCore, QtGui, QtWidgets
from recipe import RecipeWidgets

CONFIG = dict()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1250, 900)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                 "background-color: rgb(44, 44, 44);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 80, 821, 31))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(255, 255, 255);\n"
                                 "background-color: rgb(56, 56, 56);")
        self.label.setObjectName("label")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(20, 60, 1200, 131))
        self.listWidget.setStyleSheet("border-radius: 20px;\n"
                                      "background-color: rgb(56, 56, 56);")
        self.listWidget.setObjectName("listWidget")
        self.input_product = QtWidgets.QLineEdit(self.centralwidget)
        self.input_product.setGeometry(QtCore.QRect(50, 130, 871, 35))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.input_product.setFont(font)
        self.input_product.setStyleSheet("color: rgb(0, 0, 0);\n"
                                         "background-color: rgb(255, 255, 255);\n"
                                         "border-top-left-radius: 10px;\n"
                                         "border-top-right-radius: 0px;\n"
                                         "border-bottom-right-radius: 0px;\n"
                                         "border-bottom-left-radius: 10px;\n"
                                         "border-top-color: rgb(44, 44, 44);\n"
                                         "border-top-style: solid;\n"
                                         "border-top-width: 1px;\n"
                                         "border-right-color: rgb(44, 44, 44);\n"
                                         "border-right-style: solid;\n"
                                         "border-right-width: 1px;\n"
                                         "border-bottom-color: rgb(44, 44, 44);\n"
                                         "border-bottom-style: solid;\n"
                                         "border-bottom-width: 1px;\n"
                                         "border-left-color: rgb(44, 44, 44);\n"
                                         "border-left-style: solid;\n"
                                         "border-left-width: 1px;\n"
                                         "border-image-source: initial;\n"
                                         "border-image-slice: initial;\n"
                                         "border-image-width: initial;\n"
                                         "border-image-outset: initial;\n"
                                         "border-image-repeat: initial;")
        self.input_product.setText("")
        self.input_product.setObjectName("input_product")
        self.search_recipe = QtWidgets.QPushButton(self.centralwidget)
        self.search_recipe.setGeometry(QtCore.QRect(920, 131, 261, 33))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.search_recipe.setFont(font)
        self.search_recipe.setStyleSheet("background-color: rgb(231, 180, 0);\n"
                                         "border-color: rgb(44, 44, 44);\n"
                                         "border-top-left-radius: 0px;\n"
                                         "border-top-right-radius: 10px;\n"
                                         "border-bottom-right-radius: 10px;\n"
                                         "border-bottom-left-radius: 0px;")
        self.search_recipe.setObjectName("search_recipe")
        self.search_recipe.clicked.connect(self._getting_recipes)
        self.list_recipes = QtWidgets.QWidget(self.centralwidget)
        self.list_recipes.setGeometry(QtCore.QRect(20, 220, 1200, 651))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.list_recipes.sizePolicy().hasHeightForWidth())
        self.list_recipes.setSizePolicy(sizePolicy)
        self.list_recipes.setStyleSheet("border-radius: 30px;\n"
                                        "")
        self.list_recipes.setObjectName("list_recipes")
        self.gridLayout = QtWidgets.QGridLayout(self.list_recipes)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.listWidget.raise_()
        self.label.raise_()
        self.input_product.raise_()
        self.search_recipe.raise_()
        self.list_recipes.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "WhatsEat"))
        MainWindow.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><br/></p></body></html>"))
        self.label.setText(_translate("MainWindow", "Введите названия продуктов которые имеются у вас:"))
        self.search_recipe.setText(_translate("MainWindow", "Подобрать рецепт"))

    def _getting_recipes(self):
        print("start _getting_recipes")
        self.widget = RecipeWidgets()
        print('finish _getting_recipes')


def load_configs():
    config_keys = [
        'DEFAULT_IP_ADDRESS',
        'DEFAULT_PORT',
        'ENCODING'
    ]
    if not os.path.exists('config.json'):
        print('Файл конфигурации не найден')
        sys.exit(1)
    with open('config.json') as config_file:
        CONFIGS = json.load(config_file)
    loaded_configs_keys = list(CONFIGS.keys())
    for key in config_keys:
        if key not in loaded_configs_keys:
            print(f'В файле конфигурации не хватает ключа: {key}')
            sys.exit(1)
    return CONFIGS


def get_response(address, response):
    return str(address + response)


def get_address(CONFIG):
    return f'http://{CONFIG["DEFAULT_IP_ADDRESS"]}:{CONFIG["DEFAULT_PORT"]}/whatseat/api/v1/'


def get_items_response(items='products'):
    return f'{items}?{items}='


def get_search_str(**kwargs):
    pass


def get_response_server(address, items, search=None):
    if search:
        return f'{address}{items}{search}'
    else:
        return f'{address}{items}'


if __name__ == "__main__":
    # app = QtWidgets.QApplication(sys.argv)
    # MainWindow = QtWidgets.QMainWindow()
    # ui = Ui_MainWindow()
    # ui.setupUi(MainWindow)
    # MainWindow.show()
    # sys.exit(app.exec_())

    CONFIG = load_configs()
    ADDRESS_SERVER = get_address(CONFIG)
    session = requests.Session()
    item_response = get_items_response()
    str_search = 'яйцо куринное, молоко'
    answer_server = session.get(get_response_server(ADDRESS_SERVER, item_response, str_search))
    print(answer_server.json())
