# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'sample.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import socket
import threading
import logging
import json
import time
import argparse

from DesktopProgram.utils.decorators import Log
from DesktopProgram.utils.utils import send_message, load_configs, get_message
from utils.errors import ReqFieldMissingError, ServerError, IncorrectDataRecivedError
from PyQt5 import QtCore, QtGui, QtWidgets
from recipe import RecipeWidgets

CONFIGS = dict()
SERVER_LOGGER = logging.getLogger('client')


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1250, 900)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                 "background-color: rgb(44, 44, 44);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 80, 821, 31))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(255, 255, 255);\n"
                                 "background-color: rgb(56, 56, 56);")
        self.label.setObjectName("label")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(20, 60, 1200, 131))
        self.listWidget.setStyleSheet("border-radius: 20px;\n"
                                      "background-color: rgb(56, 56, 56);")
        self.listWidget.setObjectName("listWidget")
        self.input_product = QtWidgets.QLineEdit(self.centralwidget)
        self.input_product.setGeometry(QtCore.QRect(50, 130, 871, 35))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.input_product.setFont(font)
        self.input_product.setStyleSheet("color: rgb(0, 0, 0);\n"
                                         "background-color: rgb(255, 255, 255);\n"
                                         "border-top-left-radius: 10px;\n"
                                         "border-top-right-radius: 0px;\n"
                                         "border-bottom-right-radius: 0px;\n"
                                         "border-bottom-left-radius: 10px;\n"
                                         "border-top-color: rgb(44, 44, 44);\n"
                                         "border-top-style: solid;\n"
                                         "border-top-width: 1px;\n"
                                         "border-right-color: rgb(44, 44, 44);\n"
                                         "border-right-style: solid;\n"
                                         "border-right-width: 1px;\n"
                                         "border-bottom-color: rgb(44, 44, 44);\n"
                                         "border-bottom-style: solid;\n"
                                         "border-bottom-width: 1px;\n"
                                         "border-left-color: rgb(44, 44, 44);\n"
                                         "border-left-style: solid;\n"
                                         "border-left-width: 1px;\n"
                                         "border-image-source: initial;\n"
                                         "border-image-slice: initial;\n"
                                         "border-image-width: initial;\n"
                                         "border-image-outset: initial;\n"
                                         "border-image-repeat: initial;")
        self.input_product.setText("")
        self.input_product.setObjectName("input_product")
        self.search_recipe = QtWidgets.QPushButton(self.centralwidget)
        self.search_recipe.setGeometry(QtCore.QRect(920, 131, 261, 33))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.search_recipe.setFont(font)
        self.search_recipe.setStyleSheet("background-color: rgb(231, 180, 0);\n"
                                         "border-color: rgb(44, 44, 44);\n"
                                         "border-top-left-radius: 0px;\n"
                                         "border-top-right-radius: 10px;\n"
                                         "border-bottom-right-radius: 10px;\n"
                                         "border-bottom-left-radius: 0px;")
        self.search_recipe.setObjectName("search_recipe")
        self.search_recipe.clicked.connect(self._getting_recipes)
        self.list_recipes = QtWidgets.QWidget(self.centralwidget)
        self.list_recipes.setGeometry(QtCore.QRect(20, 220, 1200, 651))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.list_recipes.sizePolicy().hasHeightForWidth())
        self.list_recipes.setSizePolicy(sizePolicy)
        self.list_recipes.setStyleSheet("border-radius: 30px;\n"
                                        "")
        self.list_recipes.setObjectName("list_recipes")
        self.gridLayout = QtWidgets.QGridLayout(self.list_recipes)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.listWidget.raise_()
        self.label.raise_()
        self.input_product.raise_()
        self.search_recipe.raise_()
        self.list_recipes.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "WhatsEat"))
        MainWindow.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><br/></p></body></html>"))
        self.label.setText(_translate("MainWindow", "Введите названия продуктов которые имеются у вас:"))
        self.search_recipe.setText(_translate("MainWindow", "Подобрать рецепт"))

    def _getting_recipes(self):
        print("start _getting_recipes")
        self.widget = RecipeWidgets()
        print('finish _getting_recipes')



@Log()
def create_exit_message(account_name):
    return {
        CONFIGS['ACTION']: CONFIGS['EXIT'],
        CONFIGS['TIME']: time.time(),
        CONFIGS['ACCOUNT_NAME']: account_name
    }

@Log()
def create_presence_message(CONFIGS, account_name='Guest'):
    message = {
        CONFIGS.get('ACTION'): CONFIGS.get('PRESENCE'),
        CONFIGS.get('TIME'): time.time(),
        CONFIGS.get('USER'): {
            CONFIGS.get('ACCOUNT_NAME'): account_name
        }
    }
    SERVER_LOGGER.info('Создание сообщения для отпарвки на сервер.')
    return message

def get_user_message(sock, CONFIGS, account_name='Guest'):
    message = input('Введите сообщение для отправки или \'!!!\' для завершения работы: ')
    if message == '!!!':
        sock.close()
        SERVER_LOGGER.info('Завершение работы по команде пользователя.')
        print('Спасибо за использование нашего сервиса!')
        sys.exit(0)
    message_dict = {
        CONFIGS['ACTION']: CONFIGS['MESSAGE'],
        CONFIGS['TIME']: time.time(),
        CONFIGS['ACCOUNT_NAME']: account_name,
        CONFIGS['MESSAGE_TEXT']: message
    }
    SERVER_LOGGER.debug(f'Сформирован словарь сообщения: {message_dict}')
    return message_dict

def create_message(sock, account_name='Guest'):
    to_user = input('Введите получателя сообщения: ')
    message = input('Введите сообщение для отправки: ')
    message_dict = {
        CONFIGS['ACTION']: CONFIGS['MESSAGE'],
        CONFIGS['SENDER']: account_name,
        CONFIGS['DESTINATION']: to_user,
        CONFIGS['TIME']: time.time(),
        CONFIGS['MESSAGE_TEXT']: message
    }
    SERVER_LOGGER.debug(f'Сформирован словарь сообщения: {message_dict}')
    try:
        send_message(sock, message_dict, CONFIGS)
        SERVER_LOGGER.info(f'Отправлено сообщение для пользователя {to_user}')
    except:
        SERVER_LOGGER.critical('Потеряно соединение с сервером.')
        sys.exit(1)


def handle_server_message(message, CONFIG):
    if CONFIG['ACTION'] in message and message[CONFIG['ACTION']] == CONFIG['MESSAGE'] and \
            CONFIG['SENDER'] in message and CONFIG['MESSAGE_TEXT'] in message:
        print(f'Получено сообщение от пользователя '
              f'{message[CONFIG["SENDER"]]}:\n{message[CONFIG["MESSAGE_TEXT"]]}')
        SERVER_LOGGER.info(f'Получено сообщение от пользователя '
                    f'{message[CONFIG["SENDER"]]}:\n{message[CONFIG["MESSAGE_TEXT"]]}')
    else:
        SERVER_LOGGER.error(f'Получено некорректное сообщение с сервера: {message}')


@Log()
def arg_parser(CONFIGS):
    parser = argparse.ArgumentParser()
    parser.add_argument('addr', default=CONFIGS['DEFAULT_IP_ADDRESS'], nargs='?')
    parser.add_argument('port', default=CONFIGS['DEFAULT_PORT'], type=int, nargs='?')
    parser.add_argument('-m', '--mode', default='listen', nargs='?')
    namespace = parser.parse_args(sys.argv[1:])
    server_address = namespace.addr
    server_port = namespace.port
    client_mode = namespace.mode

    if not 1023 < server_port < 65536:
        SERVER_LOGGER.critical('Порт должен быть указан в пределах от 1024 до 65535')
        sys.exit(1)

    if client_mode not in ('listen', 'send'):
        SERVER_LOGGER.critical(f'Указан недопустимый режим работы {client_mode}, допустимые режимы: listen , send')
        sys.exit(1)

    return server_address, server_port, client_mode


@Log()
def handle_response(message, CONFIGS):
    SERVER_LOGGER.info('Обработка сообщения от сервера.')
    if CONFIGS.get('RESPONSE') in message:
        if message[CONFIGS.get('RESPONSE')] == 200:
            SERVER_LOGGER.info('Успешная обработка сообшения от сервера.')
            return '200 : OK'
        SERVER_LOGGER.critical('Обработка сообщения от сервера провалилась.')
        return f'400 : {message[CONFIGS.get("ERROR")]}'
    raise ValueError


@Log()
def message_from_server(sock, my_username):
    while True:
        try:
            message = get_message(sock, CONFIGS)
            if CONFIGS['ACTION'] in message and message[CONFIGS['ACTION']] == CONFIGS['MESSAGE'] and \
                    CONFIGS['SENDER'] in message and CONFIGS['DESTINATION'] in message \
                    and CONFIGS['MESSAGE_TEXT'] in message and message[CONFIGS['DESTINATION']] == my_username:
                print(f'\nПолучено сообщение от пользователя {message[CONFIGS["SENDER"]]}:'
                      f'\n{message[CONFIGS["MESSAGE_TEXT"]]}')
                SERVER_LOGGER.info(f'Получено сообщение от пользователя {message[CONFIGS["SENDER"]]}:'
                            f'\n{message[CONFIGS["MESSAGE_TEXT"]]}')
            else:
                SERVER_LOGGER.error(f'Получено некорректное сообщение с сервера: {message}')
        except IncorrectDataRecivedError:
            SERVER_LOGGER.error(f'Не удалось декодировать полученное сообщение.')
        except (OSError, ConnectionError, ConnectionAbortedError,
                ConnectionResetError, json.JSONDecodeError):
            SERVER_LOGGER.critical(f'Потеряно соединение с сервером.')
            break





if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
    # CONFIGS = load_configs(is_server=False)
    # server_address, server_port, client_mode = arg_parser(CONFIGS)
    # try:
    #     transport = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    #     transport.connect((server_address, server_port))
    #     send_message(transport, create_presence_message(CONFIGS), CONFIGS)
    #     answer = handle_response(get_message(transport, CONFIGS), CONFIGS)
    #     SERVER_LOGGER.info(f'Установлено соединение с сервером. Ответ сервера: {answer}')
    #     print(f'Установлено соединение с сервером.')
    # except json.JSONDecodeError:
    #     SERVER_LOGGER.error('Не удалось декодировать полученную Json строку.')
    #     sys.exit(1)
    # except ServerError as error:
    #     SERVER_LOGGER.error(f'При установке соединения сервер вернул ошибку: {error.text}')
    #     sys.exit(1)
    # except ReqFieldMissingError as missing_error:
    #     SERVER_LOGGER.error(f'В ответе сервера отсутствует необходимое поле {missing_error.missing_field}')
    #     sys.exit(1)
    # except ConnectionRefusedError:
    #     SERVER_LOGGER.critical(
    #         f'Не удалось подключиться к серверу {server_address}:{server_port}, '
    #         f'конечный компьютер отверг запрос на подключение.')
    #     sys.exit(1)
    # else:
    #     client_name = ''
    #     receiver = threading.Thread(target=message_from_server, args=(transport, client_name))
    #     receiver.daemon = True
    #     receiver.start()
    #
    #     # user_interface = threading.Thread(target=user_interactive, args=(transport, client_name))
    #     # user_interface.daemon = True
    #     # user_interface.start()
    #     SERVER_LOGGER.debug('Запущены процессы')
